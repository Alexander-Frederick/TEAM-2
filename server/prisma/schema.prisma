// schema.prisma
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int            @id @default(autoincrement())
  email       String         @unique
  password    String
  name        String
  phoneNumber String?
  role        String         // "PROFESSOR", "TUTOR", or "STUDENT"
  
  // Professor specific fields
  professorClasses Class[]   @relation("ProfessorToClass")
  professorFeedback Feedback[] @relation("ProfessorFeedback")
  
  // Tutor specific fields
  availability          String?    // Stored as stringified JSON
  tutorClasses          Class[]    @relation("TutorToClass")
  sessions              StudySession[]
  tutorFeedback         Feedback[] @relation("TutorFeedback")
  tutorGivesFeedback    Feedback[] @relation("TutorGivesFeedback")
  
  // Student specific fields
  studentGivesFeedback  Feedback[] @relation("StudentGivesFeedback")
}

model Class {
  classId    Int            @id @default(autoincrement())
  courseCode String         @unique
  name       String
  professors User[]         @relation("ProfessorToClass")
  tutors     User[]         @relation("TutorToClass")
  sessions   StudySession[]
  Feedback   Feedback[]
}

model StudySession {
  sessionId Int    @id @default(autoincrement())
  tutorId   Int
  tutor     User   @relation(fields: [tutorId], references: [id])
  classCode String
  class     Class  @relation(fields: [classCode], references: [courseCode])
  location  String
  time      String // Stored as stringified JSON
}

model Feedback {
  feedbackId  Int    @id @default(autoincrement())
  
  // Who gave the feedback (either a student or a tutor)
  fromStudentId Int?
  fromStudent   User? @relation("StudentGivesFeedback", fields: [fromStudentId], references: [id])
  
  fromTutorId   Int?
  fromTutor     User? @relation("TutorGivesFeedback", fields: [fromTutorId], references: [id])
  
  // Who received the feedback (professor or tutor)
  professorId   Int?
  professor     User? @relation("ProfessorFeedback", fields: [professorId], references: [id])
  
  tutorId       Int?
  tutor         User? @relation("TutorFeedback", fields: [tutorId], references: [id])
  
  classCode     String
  class         Class @relation(fields: [classCode], references: [courseCode])
  feedback      String
  createdAt     DateTime @default(now())
}