
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model StudySession
 * 
 */
export type StudySession = $Result.DefaultSelection<Prisma.$StudySessionPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs>;

  /**
   * `prisma.studySession`: Exposes CRUD operations for the **StudySession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudySessions
    * const studySessions = await prisma.studySession.findMany()
    * ```
    */
  get studySession(): Prisma.StudySessionDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Class: 'Class',
    StudySession: 'StudySession',
    Feedback: 'Feedback'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "class" | "studySession" | "feedback"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      StudySession: {
        payload: Prisma.$StudySessionPayload<ExtArgs>
        fields: Prisma.StudySessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudySessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudySessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          findFirst: {
            args: Prisma.StudySessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudySessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          findMany: {
            args: Prisma.StudySessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>[]
          }
          create: {
            args: Prisma.StudySessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          createMany: {
            args: Prisma.StudySessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudySessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>[]
          }
          delete: {
            args: Prisma.StudySessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          update: {
            args: Prisma.StudySessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          deleteMany: {
            args: Prisma.StudySessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudySessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudySessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudySessionPayload>
          }
          aggregate: {
            args: Prisma.StudySessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudySession>
          }
          groupBy: {
            args: Prisma.StudySessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudySessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudySessionCountArgs<ExtArgs>
            result: $Utils.Optional<StudySessionCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    professorClasses: number
    professorFeedback: number
    tutorClasses: number
    sessions: number
    tutorFeedback: number
    tutorGivesFeedback: number
    studentGivesFeedback: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professorClasses?: boolean | UserCountOutputTypeCountProfessorClassesArgs
    professorFeedback?: boolean | UserCountOutputTypeCountProfessorFeedbackArgs
    tutorClasses?: boolean | UserCountOutputTypeCountTutorClassesArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    tutorFeedback?: boolean | UserCountOutputTypeCountTutorFeedbackArgs
    tutorGivesFeedback?: boolean | UserCountOutputTypeCountTutorGivesFeedbackArgs
    studentGivesFeedback?: boolean | UserCountOutputTypeCountStudentGivesFeedbackArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfessorClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfessorFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTutorClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTutorFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTutorGivesFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentGivesFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    professors: number
    tutors: number
    sessions: number
    Feedback: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professors?: boolean | ClassCountOutputTypeCountProfessorsArgs
    tutors?: boolean | ClassCountOutputTypeCountTutorsArgs
    sessions?: boolean | ClassCountOutputTypeCountSessionsArgs
    Feedback?: boolean | ClassCountOutputTypeCountFeedbackArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountProfessorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountTutorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    phoneNumber: string | null
    role: string | null
    availability: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    phoneNumber: string | null
    role: string | null
    availability: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    phoneNumber: number
    role: number
    availability: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phoneNumber?: true
    role?: true
    availability?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phoneNumber?: true
    role?: true
    availability?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    phoneNumber?: true
    role?: true
    availability?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    phoneNumber: string | null
    role: string
    availability: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phoneNumber?: boolean
    role?: boolean
    availability?: boolean
    professorClasses?: boolean | User$professorClassesArgs<ExtArgs>
    professorFeedback?: boolean | User$professorFeedbackArgs<ExtArgs>
    tutorClasses?: boolean | User$tutorClassesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    tutorFeedback?: boolean | User$tutorFeedbackArgs<ExtArgs>
    tutorGivesFeedback?: boolean | User$tutorGivesFeedbackArgs<ExtArgs>
    studentGivesFeedback?: boolean | User$studentGivesFeedbackArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phoneNumber?: boolean
    role?: boolean
    availability?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    phoneNumber?: boolean
    role?: boolean
    availability?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professorClasses?: boolean | User$professorClassesArgs<ExtArgs>
    professorFeedback?: boolean | User$professorFeedbackArgs<ExtArgs>
    tutorClasses?: boolean | User$tutorClassesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    tutorFeedback?: boolean | User$tutorFeedbackArgs<ExtArgs>
    tutorGivesFeedback?: boolean | User$tutorGivesFeedbackArgs<ExtArgs>
    studentGivesFeedback?: boolean | User$studentGivesFeedbackArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      professorClasses: Prisma.$ClassPayload<ExtArgs>[]
      professorFeedback: Prisma.$FeedbackPayload<ExtArgs>[]
      tutorClasses: Prisma.$ClassPayload<ExtArgs>[]
      sessions: Prisma.$StudySessionPayload<ExtArgs>[]
      tutorFeedback: Prisma.$FeedbackPayload<ExtArgs>[]
      tutorGivesFeedback: Prisma.$FeedbackPayload<ExtArgs>[]
      studentGivesFeedback: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      phoneNumber: string | null
      role: string
      availability: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professorClasses<T extends User$professorClassesArgs<ExtArgs> = {}>(args?: Subset<T, User$professorClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany"> | Null>
    professorFeedback<T extends User$professorFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$professorFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    tutorClasses<T extends User$tutorClassesArgs<ExtArgs> = {}>(args?: Subset<T, User$tutorClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany"> | Null>
    tutorFeedback<T extends User$tutorFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$tutorFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    tutorGivesFeedback<T extends User$tutorGivesFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$tutorGivesFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    studentGivesFeedback<T extends User$studentGivesFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$studentGivesFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly availability: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.professorClasses
   */
  export type User$professorClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * User.professorFeedback
   */
  export type User$professorFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.tutorClasses
   */
  export type User$tutorClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    cursor?: StudySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * User.tutorFeedback
   */
  export type User$tutorFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.tutorGivesFeedback
   */
  export type User$tutorGivesFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.studentGivesFeedback
   */
  export type User$studentGivesFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    classId: number | null
  }

  export type ClassSumAggregateOutputType = {
    classId: number | null
  }

  export type ClassMinAggregateOutputType = {
    classId: number | null
    courseCode: string | null
    name: string | null
  }

  export type ClassMaxAggregateOutputType = {
    classId: number | null
    courseCode: string | null
    name: string | null
  }

  export type ClassCountAggregateOutputType = {
    classId: number
    courseCode: number
    name: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    classId?: true
  }

  export type ClassSumAggregateInputType = {
    classId?: true
  }

  export type ClassMinAggregateInputType = {
    classId?: true
    courseCode?: true
    name?: true
  }

  export type ClassMaxAggregateInputType = {
    classId?: true
    courseCode?: true
    name?: true
  }

  export type ClassCountAggregateInputType = {
    classId?: true
    courseCode?: true
    name?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    classId: number
    courseCode: string
    name: string
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    courseCode?: boolean
    name?: boolean
    professors?: boolean | Class$professorsArgs<ExtArgs>
    tutors?: boolean | Class$tutorsArgs<ExtArgs>
    sessions?: boolean | Class$sessionsArgs<ExtArgs>
    Feedback?: boolean | Class$FeedbackArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    courseCode?: boolean
    name?: boolean
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    classId?: boolean
    courseCode?: boolean
    name?: boolean
  }

  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professors?: boolean | Class$professorsArgs<ExtArgs>
    tutors?: boolean | Class$tutorsArgs<ExtArgs>
    sessions?: boolean | Class$sessionsArgs<ExtArgs>
    Feedback?: boolean | Class$FeedbackArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      professors: Prisma.$UserPayload<ExtArgs>[]
      tutors: Prisma.$UserPayload<ExtArgs>[]
      sessions: Prisma.$StudySessionPayload<ExtArgs>[]
      Feedback: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      classId: number
      courseCode: string
      name: string
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `classId`
     * const classWithClassIdOnly = await prisma.class.findMany({ select: { classId: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `classId`
     * const classWithClassIdOnly = await prisma.class.createManyAndReturn({ 
     *   select: { classId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professors<T extends Class$professorsArgs<ExtArgs> = {}>(args?: Subset<T, Class$professorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    tutors<T extends Class$tutorsArgs<ExtArgs> = {}>(args?: Subset<T, Class$tutorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends Class$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Class$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany"> | Null>
    Feedback<T extends Class$FeedbackArgs<ExtArgs> = {}>(args?: Subset<T, Class$FeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */ 
  interface ClassFieldRefs {
    readonly classId: FieldRef<"Class", 'Int'>
    readonly courseCode: FieldRef<"Class", 'String'>
    readonly name: FieldRef<"Class", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
  }

  /**
   * Class.professors
   */
  export type Class$professorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Class.tutors
   */
  export type Class$tutorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Class.sessions
   */
  export type Class$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    cursor?: StudySessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * Class.Feedback
   */
  export type Class$FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model StudySession
   */

  export type AggregateStudySession = {
    _count: StudySessionCountAggregateOutputType | null
    _avg: StudySessionAvgAggregateOutputType | null
    _sum: StudySessionSumAggregateOutputType | null
    _min: StudySessionMinAggregateOutputType | null
    _max: StudySessionMaxAggregateOutputType | null
  }

  export type StudySessionAvgAggregateOutputType = {
    sessionId: number | null
    tutorId: number | null
  }

  export type StudySessionSumAggregateOutputType = {
    sessionId: number | null
    tutorId: number | null
  }

  export type StudySessionMinAggregateOutputType = {
    sessionId: number | null
    tutorId: number | null
    classCode: string | null
    location: string | null
    time: string | null
  }

  export type StudySessionMaxAggregateOutputType = {
    sessionId: number | null
    tutorId: number | null
    classCode: string | null
    location: string | null
    time: string | null
  }

  export type StudySessionCountAggregateOutputType = {
    sessionId: number
    tutorId: number
    classCode: number
    location: number
    time: number
    _all: number
  }


  export type StudySessionAvgAggregateInputType = {
    sessionId?: true
    tutorId?: true
  }

  export type StudySessionSumAggregateInputType = {
    sessionId?: true
    tutorId?: true
  }

  export type StudySessionMinAggregateInputType = {
    sessionId?: true
    tutorId?: true
    classCode?: true
    location?: true
    time?: true
  }

  export type StudySessionMaxAggregateInputType = {
    sessionId?: true
    tutorId?: true
    classCode?: true
    location?: true
    time?: true
  }

  export type StudySessionCountAggregateInputType = {
    sessionId?: true
    tutorId?: true
    classCode?: true
    location?: true
    time?: true
    _all?: true
  }

  export type StudySessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudySession to aggregate.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudySessions
    **/
    _count?: true | StudySessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudySessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudySessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudySessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudySessionMaxAggregateInputType
  }

  export type GetStudySessionAggregateType<T extends StudySessionAggregateArgs> = {
        [P in keyof T & keyof AggregateStudySession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudySession[P]>
      : GetScalarType<T[P], AggregateStudySession[P]>
  }




  export type StudySessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudySessionWhereInput
    orderBy?: StudySessionOrderByWithAggregationInput | StudySessionOrderByWithAggregationInput[]
    by: StudySessionScalarFieldEnum[] | StudySessionScalarFieldEnum
    having?: StudySessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudySessionCountAggregateInputType | true
    _avg?: StudySessionAvgAggregateInputType
    _sum?: StudySessionSumAggregateInputType
    _min?: StudySessionMinAggregateInputType
    _max?: StudySessionMaxAggregateInputType
  }

  export type StudySessionGroupByOutputType = {
    sessionId: number
    tutorId: number
    classCode: string
    location: string
    time: string
    _count: StudySessionCountAggregateOutputType | null
    _avg: StudySessionAvgAggregateOutputType | null
    _sum: StudySessionSumAggregateOutputType | null
    _min: StudySessionMinAggregateOutputType | null
    _max: StudySessionMaxAggregateOutputType | null
  }

  type GetStudySessionGroupByPayload<T extends StudySessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudySessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudySessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudySessionGroupByOutputType[P]>
            : GetScalarType<T[P], StudySessionGroupByOutputType[P]>
        }
      >
    >


  export type StudySessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sessionId?: boolean
    tutorId?: boolean
    classCode?: boolean
    location?: boolean
    time?: boolean
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studySession"]>

  export type StudySessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sessionId?: boolean
    tutorId?: boolean
    classCode?: boolean
    location?: boolean
    time?: boolean
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studySession"]>

  export type StudySessionSelectScalar = {
    sessionId?: boolean
    tutorId?: boolean
    classCode?: boolean
    location?: boolean
    time?: boolean
  }

  export type StudySessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type StudySessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $StudySessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudySession"
    objects: {
      tutor: Prisma.$UserPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sessionId: number
      tutorId: number
      classCode: string
      location: string
      time: string
    }, ExtArgs["result"]["studySession"]>
    composites: {}
  }

  type StudySessionGetPayload<S extends boolean | null | undefined | StudySessionDefaultArgs> = $Result.GetResult<Prisma.$StudySessionPayload, S>

  type StudySessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudySessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudySessionCountAggregateInputType | true
    }

  export interface StudySessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudySession'], meta: { name: 'StudySession' } }
    /**
     * Find zero or one StudySession that matches the filter.
     * @param {StudySessionFindUniqueArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudySessionFindUniqueArgs>(args: SelectSubset<T, StudySessionFindUniqueArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StudySession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudySessionFindUniqueOrThrowArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudySessionFindUniqueOrThrowArgs>(args: SelectSubset<T, StudySessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StudySession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionFindFirstArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudySessionFindFirstArgs>(args?: SelectSubset<T, StudySessionFindFirstArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StudySession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionFindFirstOrThrowArgs} args - Arguments to find a StudySession
     * @example
     * // Get one StudySession
     * const studySession = await prisma.studySession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudySessionFindFirstOrThrowArgs>(args?: SelectSubset<T, StudySessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StudySessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudySessions
     * const studySessions = await prisma.studySession.findMany()
     * 
     * // Get first 10 StudySessions
     * const studySessions = await prisma.studySession.findMany({ take: 10 })
     * 
     * // Only select the `sessionId`
     * const studySessionWithSessionIdOnly = await prisma.studySession.findMany({ select: { sessionId: true } })
     * 
     */
    findMany<T extends StudySessionFindManyArgs>(args?: SelectSubset<T, StudySessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StudySession.
     * @param {StudySessionCreateArgs} args - Arguments to create a StudySession.
     * @example
     * // Create one StudySession
     * const StudySession = await prisma.studySession.create({
     *   data: {
     *     // ... data to create a StudySession
     *   }
     * })
     * 
     */
    create<T extends StudySessionCreateArgs>(args: SelectSubset<T, StudySessionCreateArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StudySessions.
     * @param {StudySessionCreateManyArgs} args - Arguments to create many StudySessions.
     * @example
     * // Create many StudySessions
     * const studySession = await prisma.studySession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudySessionCreateManyArgs>(args?: SelectSubset<T, StudySessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudySessions and returns the data saved in the database.
     * @param {StudySessionCreateManyAndReturnArgs} args - Arguments to create many StudySessions.
     * @example
     * // Create many StudySessions
     * const studySession = await prisma.studySession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudySessions and only return the `sessionId`
     * const studySessionWithSessionIdOnly = await prisma.studySession.createManyAndReturn({ 
     *   select: { sessionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudySessionCreateManyAndReturnArgs>(args?: SelectSubset<T, StudySessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StudySession.
     * @param {StudySessionDeleteArgs} args - Arguments to delete one StudySession.
     * @example
     * // Delete one StudySession
     * const StudySession = await prisma.studySession.delete({
     *   where: {
     *     // ... filter to delete one StudySession
     *   }
     * })
     * 
     */
    delete<T extends StudySessionDeleteArgs>(args: SelectSubset<T, StudySessionDeleteArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StudySession.
     * @param {StudySessionUpdateArgs} args - Arguments to update one StudySession.
     * @example
     * // Update one StudySession
     * const studySession = await prisma.studySession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudySessionUpdateArgs>(args: SelectSubset<T, StudySessionUpdateArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StudySessions.
     * @param {StudySessionDeleteManyArgs} args - Arguments to filter StudySessions to delete.
     * @example
     * // Delete a few StudySessions
     * const { count } = await prisma.studySession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudySessionDeleteManyArgs>(args?: SelectSubset<T, StudySessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudySessions
     * const studySession = await prisma.studySession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudySessionUpdateManyArgs>(args: SelectSubset<T, StudySessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudySession.
     * @param {StudySessionUpsertArgs} args - Arguments to update or create a StudySession.
     * @example
     * // Update or create a StudySession
     * const studySession = await prisma.studySession.upsert({
     *   create: {
     *     // ... data to create a StudySession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudySession we want to update
     *   }
     * })
     */
    upsert<T extends StudySessionUpsertArgs>(args: SelectSubset<T, StudySessionUpsertArgs<ExtArgs>>): Prisma__StudySessionClient<$Result.GetResult<Prisma.$StudySessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StudySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionCountArgs} args - Arguments to filter StudySessions to count.
     * @example
     * // Count the number of StudySessions
     * const count = await prisma.studySession.count({
     *   where: {
     *     // ... the filter for the StudySessions we want to count
     *   }
     * })
    **/
    count<T extends StudySessionCountArgs>(
      args?: Subset<T, StudySessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudySessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudySessionAggregateArgs>(args: Subset<T, StudySessionAggregateArgs>): Prisma.PrismaPromise<GetStudySessionAggregateType<T>>

    /**
     * Group by StudySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudySessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudySessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudySessionGroupByArgs['orderBy'] }
        : { orderBy?: StudySessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudySessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudySessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudySession model
   */
  readonly fields: StudySessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudySession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudySessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tutor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudySession model
   */ 
  interface StudySessionFieldRefs {
    readonly sessionId: FieldRef<"StudySession", 'Int'>
    readonly tutorId: FieldRef<"StudySession", 'Int'>
    readonly classCode: FieldRef<"StudySession", 'String'>
    readonly location: FieldRef<"StudySession", 'String'>
    readonly time: FieldRef<"StudySession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudySession findUnique
   */
  export type StudySessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession findUniqueOrThrow
   */
  export type StudySessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession findFirst
   */
  export type StudySessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudySessions.
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudySessions.
     */
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * StudySession findFirstOrThrow
   */
  export type StudySessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySession to fetch.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudySessions.
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudySessions.
     */
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * StudySession findMany
   */
  export type StudySessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter, which StudySessions to fetch.
     */
    where?: StudySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudySessions to fetch.
     */
    orderBy?: StudySessionOrderByWithRelationInput | StudySessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudySessions.
     */
    cursor?: StudySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudySessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudySessions.
     */
    skip?: number
    distinct?: StudySessionScalarFieldEnum | StudySessionScalarFieldEnum[]
  }

  /**
   * StudySession create
   */
  export type StudySessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * The data needed to create a StudySession.
     */
    data: XOR<StudySessionCreateInput, StudySessionUncheckedCreateInput>
  }

  /**
   * StudySession createMany
   */
  export type StudySessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudySessions.
     */
    data: StudySessionCreateManyInput | StudySessionCreateManyInput[]
  }

  /**
   * StudySession createManyAndReturn
   */
  export type StudySessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudySessions.
     */
    data: StudySessionCreateManyInput | StudySessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudySession update
   */
  export type StudySessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * The data needed to update a StudySession.
     */
    data: XOR<StudySessionUpdateInput, StudySessionUncheckedUpdateInput>
    /**
     * Choose, which StudySession to update.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession updateMany
   */
  export type StudySessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudySessions.
     */
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyInput>
    /**
     * Filter which StudySessions to update
     */
    where?: StudySessionWhereInput
  }

  /**
   * StudySession upsert
   */
  export type StudySessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * The filter to search for the StudySession to update in case it exists.
     */
    where: StudySessionWhereUniqueInput
    /**
     * In case the StudySession found by the `where` argument doesn't exist, create a new StudySession with this data.
     */
    create: XOR<StudySessionCreateInput, StudySessionUncheckedCreateInput>
    /**
     * In case the StudySession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudySessionUpdateInput, StudySessionUncheckedUpdateInput>
  }

  /**
   * StudySession delete
   */
  export type StudySessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
    /**
     * Filter which StudySession to delete.
     */
    where: StudySessionWhereUniqueInput
  }

  /**
   * StudySession deleteMany
   */
  export type StudySessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudySessions to delete
     */
    where?: StudySessionWhereInput
  }

  /**
   * StudySession without action
   */
  export type StudySessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudySession
     */
    select?: StudySessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudySessionInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    feedbackId: number | null
    fromStudentId: number | null
    fromTutorId: number | null
    professorId: number | null
    tutorId: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    feedbackId: number | null
    fromStudentId: number | null
    fromTutorId: number | null
    professorId: number | null
    tutorId: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    feedbackId: number | null
    fromStudentId: number | null
    fromTutorId: number | null
    professorId: number | null
    tutorId: number | null
    classCode: string | null
    feedback: string | null
    createdAt: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    feedbackId: number | null
    fromStudentId: number | null
    fromTutorId: number | null
    professorId: number | null
    tutorId: number | null
    classCode: string | null
    feedback: string | null
    createdAt: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    feedbackId: number
    fromStudentId: number
    fromTutorId: number
    professorId: number
    tutorId: number
    classCode: number
    feedback: number
    createdAt: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    feedbackId?: true
    fromStudentId?: true
    fromTutorId?: true
    professorId?: true
    tutorId?: true
  }

  export type FeedbackSumAggregateInputType = {
    feedbackId?: true
    fromStudentId?: true
    fromTutorId?: true
    professorId?: true
    tutorId?: true
  }

  export type FeedbackMinAggregateInputType = {
    feedbackId?: true
    fromStudentId?: true
    fromTutorId?: true
    professorId?: true
    tutorId?: true
    classCode?: true
    feedback?: true
    createdAt?: true
  }

  export type FeedbackMaxAggregateInputType = {
    feedbackId?: true
    fromStudentId?: true
    fromTutorId?: true
    professorId?: true
    tutorId?: true
    classCode?: true
    feedback?: true
    createdAt?: true
  }

  export type FeedbackCountAggregateInputType = {
    feedbackId?: true
    fromStudentId?: true
    fromTutorId?: true
    professorId?: true
    tutorId?: true
    classCode?: true
    feedback?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    feedbackId: number
    fromStudentId: number | null
    fromTutorId: number | null
    professorId: number | null
    tutorId: number | null
    classCode: string
    feedback: string
    createdAt: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    feedbackId?: boolean
    fromStudentId?: boolean
    fromTutorId?: boolean
    professorId?: boolean
    tutorId?: boolean
    classCode?: boolean
    feedback?: boolean
    createdAt?: boolean
    fromStudent?: boolean | Feedback$fromStudentArgs<ExtArgs>
    fromTutor?: boolean | Feedback$fromTutorArgs<ExtArgs>
    professor?: boolean | Feedback$professorArgs<ExtArgs>
    tutor?: boolean | Feedback$tutorArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    feedbackId?: boolean
    fromStudentId?: boolean
    fromTutorId?: boolean
    professorId?: boolean
    tutorId?: boolean
    classCode?: boolean
    feedback?: boolean
    createdAt?: boolean
    fromStudent?: boolean | Feedback$fromStudentArgs<ExtArgs>
    fromTutor?: boolean | Feedback$fromTutorArgs<ExtArgs>
    professor?: boolean | Feedback$professorArgs<ExtArgs>
    tutor?: boolean | Feedback$tutorArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    feedbackId?: boolean
    fromStudentId?: boolean
    fromTutorId?: boolean
    professorId?: boolean
    tutorId?: boolean
    classCode?: boolean
    feedback?: boolean
    createdAt?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromStudent?: boolean | Feedback$fromStudentArgs<ExtArgs>
    fromTutor?: boolean | Feedback$fromTutorArgs<ExtArgs>
    professor?: boolean | Feedback$professorArgs<ExtArgs>
    tutor?: boolean | Feedback$tutorArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromStudent?: boolean | Feedback$fromStudentArgs<ExtArgs>
    fromTutor?: boolean | Feedback$fromTutorArgs<ExtArgs>
    professor?: boolean | Feedback$professorArgs<ExtArgs>
    tutor?: boolean | Feedback$tutorArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      fromStudent: Prisma.$UserPayload<ExtArgs> | null
      fromTutor: Prisma.$UserPayload<ExtArgs> | null
      professor: Prisma.$UserPayload<ExtArgs> | null
      tutor: Prisma.$UserPayload<ExtArgs> | null
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      feedbackId: number
      fromStudentId: number | null
      fromTutorId: number | null
      professorId: number | null
      tutorId: number | null
      classCode: string
      feedback: string
      createdAt: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `feedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.findMany({ select: { feedbackId: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `feedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.createManyAndReturn({ 
     *   select: { feedbackId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fromStudent<T extends Feedback$fromStudentArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$fromStudentArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    fromTutor<T extends Feedback$fromTutorArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$fromTutorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    professor<T extends Feedback$professorArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$professorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tutor<T extends Feedback$tutorArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$tutorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly feedbackId: FieldRef<"Feedback", 'Int'>
    readonly fromStudentId: FieldRef<"Feedback", 'Int'>
    readonly fromTutorId: FieldRef<"Feedback", 'Int'>
    readonly professorId: FieldRef<"Feedback", 'Int'>
    readonly tutorId: FieldRef<"Feedback", 'Int'>
    readonly classCode: FieldRef<"Feedback", 'String'>
    readonly feedback: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }

  /**
   * Feedback.fromStudent
   */
  export type Feedback$fromStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Feedback.fromTutor
   */
  export type Feedback$fromTutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Feedback.professor
   */
  export type Feedback$professorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Feedback.tutor
   */
  export type Feedback$tutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    phoneNumber: 'phoneNumber',
    role: 'role',
    availability: 'availability'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    classId: 'classId',
    courseCode: 'courseCode',
    name: 'name'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const StudySessionScalarFieldEnum: {
    sessionId: 'sessionId',
    tutorId: 'tutorId',
    classCode: 'classCode',
    location: 'location',
    time: 'time'
  };

  export type StudySessionScalarFieldEnum = (typeof StudySessionScalarFieldEnum)[keyof typeof StudySessionScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    feedbackId: 'feedbackId',
    fromStudentId: 'fromStudentId',
    fromTutorId: 'fromTutorId',
    professorId: 'professorId',
    tutorId: 'tutorId',
    classCode: 'classCode',
    feedback: 'feedback',
    createdAt: 'createdAt'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    availability?: StringNullableFilter<"User"> | string | null
    professorClasses?: ClassListRelationFilter
    professorFeedback?: FeedbackListRelationFilter
    tutorClasses?: ClassListRelationFilter
    sessions?: StudySessionListRelationFilter
    tutorFeedback?: FeedbackListRelationFilter
    tutorGivesFeedback?: FeedbackListRelationFilter
    studentGivesFeedback?: FeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    role?: SortOrder
    availability?: SortOrderInput | SortOrder
    professorClasses?: ClassOrderByRelationAggregateInput
    professorFeedback?: FeedbackOrderByRelationAggregateInput
    tutorClasses?: ClassOrderByRelationAggregateInput
    sessions?: StudySessionOrderByRelationAggregateInput
    tutorFeedback?: FeedbackOrderByRelationAggregateInput
    tutorGivesFeedback?: FeedbackOrderByRelationAggregateInput
    studentGivesFeedback?: FeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    availability?: StringNullableFilter<"User"> | string | null
    professorClasses?: ClassListRelationFilter
    professorFeedback?: FeedbackListRelationFilter
    tutorClasses?: ClassListRelationFilter
    sessions?: StudySessionListRelationFilter
    tutorFeedback?: FeedbackListRelationFilter
    tutorGivesFeedback?: FeedbackListRelationFilter
    studentGivesFeedback?: FeedbackListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    role?: SortOrder
    availability?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    availability?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    classId?: IntFilter<"Class"> | number
    courseCode?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    professors?: UserListRelationFilter
    tutors?: UserListRelationFilter
    sessions?: StudySessionListRelationFilter
    Feedback?: FeedbackListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    classId?: SortOrder
    courseCode?: SortOrder
    name?: SortOrder
    professors?: UserOrderByRelationAggregateInput
    tutors?: UserOrderByRelationAggregateInput
    sessions?: StudySessionOrderByRelationAggregateInput
    Feedback?: FeedbackOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    classId?: number
    courseCode?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    name?: StringFilter<"Class"> | string
    professors?: UserListRelationFilter
    tutors?: UserListRelationFilter
    sessions?: StudySessionListRelationFilter
    Feedback?: FeedbackListRelationFilter
  }, "classId" | "courseCode">

  export type ClassOrderByWithAggregationInput = {
    classId?: SortOrder
    courseCode?: SortOrder
    name?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    classId?: IntWithAggregatesFilter<"Class"> | number
    courseCode?: StringWithAggregatesFilter<"Class"> | string
    name?: StringWithAggregatesFilter<"Class"> | string
  }

  export type StudySessionWhereInput = {
    AND?: StudySessionWhereInput | StudySessionWhereInput[]
    OR?: StudySessionWhereInput[]
    NOT?: StudySessionWhereInput | StudySessionWhereInput[]
    sessionId?: IntFilter<"StudySession"> | number
    tutorId?: IntFilter<"StudySession"> | number
    classCode?: StringFilter<"StudySession"> | string
    location?: StringFilter<"StudySession"> | string
    time?: StringFilter<"StudySession"> | string
    tutor?: XOR<UserRelationFilter, UserWhereInput>
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }

  export type StudySessionOrderByWithRelationInput = {
    sessionId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    location?: SortOrder
    time?: SortOrder
    tutor?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type StudySessionWhereUniqueInput = Prisma.AtLeast<{
    sessionId?: number
    AND?: StudySessionWhereInput | StudySessionWhereInput[]
    OR?: StudySessionWhereInput[]
    NOT?: StudySessionWhereInput | StudySessionWhereInput[]
    tutorId?: IntFilter<"StudySession"> | number
    classCode?: StringFilter<"StudySession"> | string
    location?: StringFilter<"StudySession"> | string
    time?: StringFilter<"StudySession"> | string
    tutor?: XOR<UserRelationFilter, UserWhereInput>
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }, "sessionId">

  export type StudySessionOrderByWithAggregationInput = {
    sessionId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    location?: SortOrder
    time?: SortOrder
    _count?: StudySessionCountOrderByAggregateInput
    _avg?: StudySessionAvgOrderByAggregateInput
    _max?: StudySessionMaxOrderByAggregateInput
    _min?: StudySessionMinOrderByAggregateInput
    _sum?: StudySessionSumOrderByAggregateInput
  }

  export type StudySessionScalarWhereWithAggregatesInput = {
    AND?: StudySessionScalarWhereWithAggregatesInput | StudySessionScalarWhereWithAggregatesInput[]
    OR?: StudySessionScalarWhereWithAggregatesInput[]
    NOT?: StudySessionScalarWhereWithAggregatesInput | StudySessionScalarWhereWithAggregatesInput[]
    sessionId?: IntWithAggregatesFilter<"StudySession"> | number
    tutorId?: IntWithAggregatesFilter<"StudySession"> | number
    classCode?: StringWithAggregatesFilter<"StudySession"> | string
    location?: StringWithAggregatesFilter<"StudySession"> | string
    time?: StringWithAggregatesFilter<"StudySession"> | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    feedbackId?: IntFilter<"Feedback"> | number
    fromStudentId?: IntNullableFilter<"Feedback"> | number | null
    fromTutorId?: IntNullableFilter<"Feedback"> | number | null
    professorId?: IntNullableFilter<"Feedback"> | number | null
    tutorId?: IntNullableFilter<"Feedback"> | number | null
    classCode?: StringFilter<"Feedback"> | string
    feedback?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    fromStudent?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    fromTutor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    professor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tutor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    feedbackId?: SortOrder
    fromStudentId?: SortOrderInput | SortOrder
    fromTutorId?: SortOrderInput | SortOrder
    professorId?: SortOrderInput | SortOrder
    tutorId?: SortOrderInput | SortOrder
    classCode?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
    fromStudent?: UserOrderByWithRelationInput
    fromTutor?: UserOrderByWithRelationInput
    professor?: UserOrderByWithRelationInput
    tutor?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    feedbackId?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    fromStudentId?: IntNullableFilter<"Feedback"> | number | null
    fromTutorId?: IntNullableFilter<"Feedback"> | number | null
    professorId?: IntNullableFilter<"Feedback"> | number | null
    tutorId?: IntNullableFilter<"Feedback"> | number | null
    classCode?: StringFilter<"Feedback"> | string
    feedback?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    fromStudent?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    fromTutor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    professor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tutor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }, "feedbackId">

  export type FeedbackOrderByWithAggregationInput = {
    feedbackId?: SortOrder
    fromStudentId?: SortOrderInput | SortOrder
    fromTutorId?: SortOrderInput | SortOrder
    professorId?: SortOrderInput | SortOrder
    tutorId?: SortOrderInput | SortOrder
    classCode?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    feedbackId?: IntWithAggregatesFilter<"Feedback"> | number
    fromStudentId?: IntNullableWithAggregatesFilter<"Feedback"> | number | null
    fromTutorId?: IntNullableWithAggregatesFilter<"Feedback"> | number | null
    professorId?: IntNullableWithAggregatesFilter<"Feedback"> | number | null
    tutorId?: IntNullableWithAggregatesFilter<"Feedback"> | number | null
    classCode?: StringWithAggregatesFilter<"Feedback"> | string
    feedback?: StringWithAggregatesFilter<"Feedback"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackCreateNestedManyWithoutFromStudentInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassUncheckedCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackUncheckedCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassUncheckedCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackUncheckedCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromStudentInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUncheckedUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUncheckedUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUncheckedUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUncheckedUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClassCreateInput = {
    courseCode: string
    name: string
    professors?: UserCreateNestedManyWithoutProfessorClassesInput
    tutors?: UserCreateNestedManyWithoutTutorClassesInput
    sessions?: StudySessionCreateNestedManyWithoutClassInput
    Feedback?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    classId?: number
    courseCode: string
    name: string
    professors?: UserUncheckedCreateNestedManyWithoutProfessorClassesInput
    tutors?: UserUncheckedCreateNestedManyWithoutTutorClassesInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutClassInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUpdateManyWithoutProfessorClassesNestedInput
    tutors?: UserUpdateManyWithoutTutorClassesNestedInput
    sessions?: StudySessionUpdateManyWithoutClassNestedInput
    Feedback?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUncheckedUpdateManyWithoutProfessorClassesNestedInput
    tutors?: UserUncheckedUpdateManyWithoutTutorClassesNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutClassNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    classId?: number
    courseCode: string
    name: string
  }

  export type ClassUpdateManyMutationInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StudySessionCreateInput = {
    location: string
    time: string
    tutor: UserCreateNestedOneWithoutSessionsInput
    class: ClassCreateNestedOneWithoutSessionsInput
  }

  export type StudySessionUncheckedCreateInput = {
    sessionId?: number
    tutorId: number
    classCode: string
    location: string
    time: string
  }

  export type StudySessionUpdateInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    tutor?: UserUpdateOneRequiredWithoutSessionsNestedInput
    class?: ClassUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type StudySessionUncheckedUpdateInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    tutorId?: IntFieldUpdateOperationsInput | number
    classCode?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type StudySessionCreateManyInput = {
    sessionId?: number
    tutorId: number
    classCode: string
    location: string
    time: string
  }

  export type StudySessionUpdateManyMutationInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type StudySessionUncheckedUpdateManyInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    tutorId?: IntFieldUpdateOperationsInput | number
    classCode?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateInput = {
    feedback: string
    createdAt?: Date | string
    fromStudent?: UserCreateNestedOneWithoutStudentGivesFeedbackInput
    fromTutor?: UserCreateNestedOneWithoutTutorGivesFeedbackInput
    professor?: UserCreateNestedOneWithoutProfessorFeedbackInput
    tutor?: UserCreateNestedOneWithoutTutorFeedbackInput
    class: ClassCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    professorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackUpdateInput = {
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStudent?: UserUpdateOneWithoutStudentGivesFeedbackNestedInput
    fromTutor?: UserUpdateOneWithoutTutorGivesFeedbackNestedInput
    professor?: UserUpdateOneWithoutProfessorFeedbackNestedInput
    tutor?: UserUpdateOneWithoutTutorFeedbackNestedInput
    class?: ClassUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    professorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type StudySessionListRelationFilter = {
    every?: StudySessionWhereInput
    some?: StudySessionWhereInput
    none?: StudySessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudySessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    availability?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    availability?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    phoneNumber?: SortOrder
    role?: SortOrder
    availability?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    classId?: SortOrder
    courseCode?: SortOrder
    name?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    classId?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    classId?: SortOrder
    courseCode?: SortOrder
    name?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    classId?: SortOrder
    courseCode?: SortOrder
    name?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    classId?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ClassRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type StudySessionCountOrderByAggregateInput = {
    sessionId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    location?: SortOrder
    time?: SortOrder
  }

  export type StudySessionAvgOrderByAggregateInput = {
    sessionId?: SortOrder
    tutorId?: SortOrder
  }

  export type StudySessionMaxOrderByAggregateInput = {
    sessionId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    location?: SortOrder
    time?: SortOrder
  }

  export type StudySessionMinOrderByAggregateInput = {
    sessionId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    location?: SortOrder
    time?: SortOrder
  }

  export type StudySessionSumOrderByAggregateInput = {
    sessionId?: SortOrder
    tutorId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FeedbackCountOrderByAggregateInput = {
    feedbackId?: SortOrder
    fromStudentId?: SortOrder
    fromTutorId?: SortOrder
    professorId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    feedbackId?: SortOrder
    fromStudentId?: SortOrder
    fromTutorId?: SortOrder
    professorId?: SortOrder
    tutorId?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    feedbackId?: SortOrder
    fromStudentId?: SortOrder
    fromTutorId?: SortOrder
    professorId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    feedbackId?: SortOrder
    fromStudentId?: SortOrder
    fromTutorId?: SortOrder
    professorId?: SortOrder
    tutorId?: SortOrder
    classCode?: SortOrder
    feedback?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    feedbackId?: SortOrder
    fromStudentId?: SortOrder
    fromTutorId?: SortOrder
    professorId?: SortOrder
    tutorId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ClassCreateNestedManyWithoutProfessorsInput = {
    create?: XOR<ClassCreateWithoutProfessorsInput, ClassUncheckedCreateWithoutProfessorsInput> | ClassCreateWithoutProfessorsInput[] | ClassUncheckedCreateWithoutProfessorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutProfessorsInput | ClassCreateOrConnectWithoutProfessorsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutProfessorInput = {
    create?: XOR<FeedbackCreateWithoutProfessorInput, FeedbackUncheckedCreateWithoutProfessorInput> | FeedbackCreateWithoutProfessorInput[] | FeedbackUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutProfessorInput | FeedbackCreateOrConnectWithoutProfessorInput[]
    createMany?: FeedbackCreateManyProfessorInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutTutorsInput = {
    create?: XOR<ClassCreateWithoutTutorsInput, ClassUncheckedCreateWithoutTutorsInput> | ClassCreateWithoutTutorsInput[] | ClassUncheckedCreateWithoutTutorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTutorsInput | ClassCreateOrConnectWithoutTutorsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type StudySessionCreateNestedManyWithoutTutorInput = {
    create?: XOR<StudySessionCreateWithoutTutorInput, StudySessionUncheckedCreateWithoutTutorInput> | StudySessionCreateWithoutTutorInput[] | StudySessionUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutTutorInput | StudySessionCreateOrConnectWithoutTutorInput[]
    createMany?: StudySessionCreateManyTutorInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutTutorInput = {
    create?: XOR<FeedbackCreateWithoutTutorInput, FeedbackUncheckedCreateWithoutTutorInput> | FeedbackCreateWithoutTutorInput[] | FeedbackUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTutorInput | FeedbackCreateOrConnectWithoutTutorInput[]
    createMany?: FeedbackCreateManyTutorInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutFromTutorInput = {
    create?: XOR<FeedbackCreateWithoutFromTutorInput, FeedbackUncheckedCreateWithoutFromTutorInput> | FeedbackCreateWithoutFromTutorInput[] | FeedbackUncheckedCreateWithoutFromTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromTutorInput | FeedbackCreateOrConnectWithoutFromTutorInput[]
    createMany?: FeedbackCreateManyFromTutorInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutFromStudentInput = {
    create?: XOR<FeedbackCreateWithoutFromStudentInput, FeedbackUncheckedCreateWithoutFromStudentInput> | FeedbackCreateWithoutFromStudentInput[] | FeedbackUncheckedCreateWithoutFromStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromStudentInput | FeedbackCreateOrConnectWithoutFromStudentInput[]
    createMany?: FeedbackCreateManyFromStudentInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutProfessorsInput = {
    create?: XOR<ClassCreateWithoutProfessorsInput, ClassUncheckedCreateWithoutProfessorsInput> | ClassCreateWithoutProfessorsInput[] | ClassUncheckedCreateWithoutProfessorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutProfessorsInput | ClassCreateOrConnectWithoutProfessorsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<FeedbackCreateWithoutProfessorInput, FeedbackUncheckedCreateWithoutProfessorInput> | FeedbackCreateWithoutProfessorInput[] | FeedbackUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutProfessorInput | FeedbackCreateOrConnectWithoutProfessorInput[]
    createMany?: FeedbackCreateManyProfessorInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutTutorsInput = {
    create?: XOR<ClassCreateWithoutTutorsInput, ClassUncheckedCreateWithoutTutorsInput> | ClassCreateWithoutTutorsInput[] | ClassUncheckedCreateWithoutTutorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTutorsInput | ClassCreateOrConnectWithoutTutorsInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type StudySessionUncheckedCreateNestedManyWithoutTutorInput = {
    create?: XOR<StudySessionCreateWithoutTutorInput, StudySessionUncheckedCreateWithoutTutorInput> | StudySessionCreateWithoutTutorInput[] | StudySessionUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutTutorInput | StudySessionCreateOrConnectWithoutTutorInput[]
    createMany?: StudySessionCreateManyTutorInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutTutorInput = {
    create?: XOR<FeedbackCreateWithoutTutorInput, FeedbackUncheckedCreateWithoutTutorInput> | FeedbackCreateWithoutTutorInput[] | FeedbackUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTutorInput | FeedbackCreateOrConnectWithoutTutorInput[]
    createMany?: FeedbackCreateManyTutorInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutFromTutorInput = {
    create?: XOR<FeedbackCreateWithoutFromTutorInput, FeedbackUncheckedCreateWithoutFromTutorInput> | FeedbackCreateWithoutFromTutorInput[] | FeedbackUncheckedCreateWithoutFromTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromTutorInput | FeedbackCreateOrConnectWithoutFromTutorInput[]
    createMany?: FeedbackCreateManyFromTutorInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutFromStudentInput = {
    create?: XOR<FeedbackCreateWithoutFromStudentInput, FeedbackUncheckedCreateWithoutFromStudentInput> | FeedbackCreateWithoutFromStudentInput[] | FeedbackUncheckedCreateWithoutFromStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromStudentInput | FeedbackCreateOrConnectWithoutFromStudentInput[]
    createMany?: FeedbackCreateManyFromStudentInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ClassUpdateManyWithoutProfessorsNestedInput = {
    create?: XOR<ClassCreateWithoutProfessorsInput, ClassUncheckedCreateWithoutProfessorsInput> | ClassCreateWithoutProfessorsInput[] | ClassUncheckedCreateWithoutProfessorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutProfessorsInput | ClassCreateOrConnectWithoutProfessorsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutProfessorsInput | ClassUpsertWithWhereUniqueWithoutProfessorsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutProfessorsInput | ClassUpdateWithWhereUniqueWithoutProfessorsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutProfessorsInput | ClassUpdateManyWithWhereWithoutProfessorsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<FeedbackCreateWithoutProfessorInput, FeedbackUncheckedCreateWithoutProfessorInput> | FeedbackCreateWithoutProfessorInput[] | FeedbackUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutProfessorInput | FeedbackCreateOrConnectWithoutProfessorInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutProfessorInput | FeedbackUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: FeedbackCreateManyProfessorInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutProfessorInput | FeedbackUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutProfessorInput | FeedbackUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutTutorsNestedInput = {
    create?: XOR<ClassCreateWithoutTutorsInput, ClassUncheckedCreateWithoutTutorsInput> | ClassCreateWithoutTutorsInput[] | ClassUncheckedCreateWithoutTutorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTutorsInput | ClassCreateOrConnectWithoutTutorsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTutorsInput | ClassUpsertWithWhereUniqueWithoutTutorsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTutorsInput | ClassUpdateWithWhereUniqueWithoutTutorsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTutorsInput | ClassUpdateManyWithWhereWithoutTutorsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type StudySessionUpdateManyWithoutTutorNestedInput = {
    create?: XOR<StudySessionCreateWithoutTutorInput, StudySessionUncheckedCreateWithoutTutorInput> | StudySessionCreateWithoutTutorInput[] | StudySessionUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutTutorInput | StudySessionCreateOrConnectWithoutTutorInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutTutorInput | StudySessionUpsertWithWhereUniqueWithoutTutorInput[]
    createMany?: StudySessionCreateManyTutorInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutTutorInput | StudySessionUpdateWithWhereUniqueWithoutTutorInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutTutorInput | StudySessionUpdateManyWithWhereWithoutTutorInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutTutorNestedInput = {
    create?: XOR<FeedbackCreateWithoutTutorInput, FeedbackUncheckedCreateWithoutTutorInput> | FeedbackCreateWithoutTutorInput[] | FeedbackUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTutorInput | FeedbackCreateOrConnectWithoutTutorInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutTutorInput | FeedbackUpsertWithWhereUniqueWithoutTutorInput[]
    createMany?: FeedbackCreateManyTutorInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutTutorInput | FeedbackUpdateWithWhereUniqueWithoutTutorInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutTutorInput | FeedbackUpdateManyWithWhereWithoutTutorInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutFromTutorNestedInput = {
    create?: XOR<FeedbackCreateWithoutFromTutorInput, FeedbackUncheckedCreateWithoutFromTutorInput> | FeedbackCreateWithoutFromTutorInput[] | FeedbackUncheckedCreateWithoutFromTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromTutorInput | FeedbackCreateOrConnectWithoutFromTutorInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutFromTutorInput | FeedbackUpsertWithWhereUniqueWithoutFromTutorInput[]
    createMany?: FeedbackCreateManyFromTutorInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutFromTutorInput | FeedbackUpdateWithWhereUniqueWithoutFromTutorInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutFromTutorInput | FeedbackUpdateManyWithWhereWithoutFromTutorInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutFromStudentNestedInput = {
    create?: XOR<FeedbackCreateWithoutFromStudentInput, FeedbackUncheckedCreateWithoutFromStudentInput> | FeedbackCreateWithoutFromStudentInput[] | FeedbackUncheckedCreateWithoutFromStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromStudentInput | FeedbackCreateOrConnectWithoutFromStudentInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutFromStudentInput | FeedbackUpsertWithWhereUniqueWithoutFromStudentInput[]
    createMany?: FeedbackCreateManyFromStudentInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutFromStudentInput | FeedbackUpdateWithWhereUniqueWithoutFromStudentInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutFromStudentInput | FeedbackUpdateManyWithWhereWithoutFromStudentInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClassUncheckedUpdateManyWithoutProfessorsNestedInput = {
    create?: XOR<ClassCreateWithoutProfessorsInput, ClassUncheckedCreateWithoutProfessorsInput> | ClassCreateWithoutProfessorsInput[] | ClassUncheckedCreateWithoutProfessorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutProfessorsInput | ClassCreateOrConnectWithoutProfessorsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutProfessorsInput | ClassUpsertWithWhereUniqueWithoutProfessorsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutProfessorsInput | ClassUpdateWithWhereUniqueWithoutProfessorsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutProfessorsInput | ClassUpdateManyWithWhereWithoutProfessorsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<FeedbackCreateWithoutProfessorInput, FeedbackUncheckedCreateWithoutProfessorInput> | FeedbackCreateWithoutProfessorInput[] | FeedbackUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutProfessorInput | FeedbackCreateOrConnectWithoutProfessorInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutProfessorInput | FeedbackUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: FeedbackCreateManyProfessorInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutProfessorInput | FeedbackUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutProfessorInput | FeedbackUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutTutorsNestedInput = {
    create?: XOR<ClassCreateWithoutTutorsInput, ClassUncheckedCreateWithoutTutorsInput> | ClassCreateWithoutTutorsInput[] | ClassUncheckedCreateWithoutTutorsInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutTutorsInput | ClassCreateOrConnectWithoutTutorsInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutTutorsInput | ClassUpsertWithWhereUniqueWithoutTutorsInput[]
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutTutorsInput | ClassUpdateWithWhereUniqueWithoutTutorsInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutTutorsInput | ClassUpdateManyWithWhereWithoutTutorsInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type StudySessionUncheckedUpdateManyWithoutTutorNestedInput = {
    create?: XOR<StudySessionCreateWithoutTutorInput, StudySessionUncheckedCreateWithoutTutorInput> | StudySessionCreateWithoutTutorInput[] | StudySessionUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutTutorInput | StudySessionCreateOrConnectWithoutTutorInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutTutorInput | StudySessionUpsertWithWhereUniqueWithoutTutorInput[]
    createMany?: StudySessionCreateManyTutorInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutTutorInput | StudySessionUpdateWithWhereUniqueWithoutTutorInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutTutorInput | StudySessionUpdateManyWithWhereWithoutTutorInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutTutorNestedInput = {
    create?: XOR<FeedbackCreateWithoutTutorInput, FeedbackUncheckedCreateWithoutTutorInput> | FeedbackCreateWithoutTutorInput[] | FeedbackUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTutorInput | FeedbackCreateOrConnectWithoutTutorInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutTutorInput | FeedbackUpsertWithWhereUniqueWithoutTutorInput[]
    createMany?: FeedbackCreateManyTutorInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutTutorInput | FeedbackUpdateWithWhereUniqueWithoutTutorInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutTutorInput | FeedbackUpdateManyWithWhereWithoutTutorInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput = {
    create?: XOR<FeedbackCreateWithoutFromTutorInput, FeedbackUncheckedCreateWithoutFromTutorInput> | FeedbackCreateWithoutFromTutorInput[] | FeedbackUncheckedCreateWithoutFromTutorInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromTutorInput | FeedbackCreateOrConnectWithoutFromTutorInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutFromTutorInput | FeedbackUpsertWithWhereUniqueWithoutFromTutorInput[]
    createMany?: FeedbackCreateManyFromTutorInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutFromTutorInput | FeedbackUpdateWithWhereUniqueWithoutFromTutorInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutFromTutorInput | FeedbackUpdateManyWithWhereWithoutFromTutorInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput = {
    create?: XOR<FeedbackCreateWithoutFromStudentInput, FeedbackUncheckedCreateWithoutFromStudentInput> | FeedbackCreateWithoutFromStudentInput[] | FeedbackUncheckedCreateWithoutFromStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutFromStudentInput | FeedbackCreateOrConnectWithoutFromStudentInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutFromStudentInput | FeedbackUpsertWithWhereUniqueWithoutFromStudentInput[]
    createMany?: FeedbackCreateManyFromStudentInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutFromStudentInput | FeedbackUpdateWithWhereUniqueWithoutFromStudentInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutFromStudentInput | FeedbackUpdateManyWithWhereWithoutFromStudentInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutProfessorClassesInput = {
    create?: XOR<UserCreateWithoutProfessorClassesInput, UserUncheckedCreateWithoutProfessorClassesInput> | UserCreateWithoutProfessorClassesInput[] | UserUncheckedCreateWithoutProfessorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorClassesInput | UserCreateOrConnectWithoutProfessorClassesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTutorClassesInput = {
    create?: XOR<UserCreateWithoutTutorClassesInput, UserUncheckedCreateWithoutTutorClassesInput> | UserCreateWithoutTutorClassesInput[] | UserUncheckedCreateWithoutTutorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTutorClassesInput | UserCreateOrConnectWithoutTutorClassesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StudySessionCreateNestedManyWithoutClassInput = {
    create?: XOR<StudySessionCreateWithoutClassInput, StudySessionUncheckedCreateWithoutClassInput> | StudySessionCreateWithoutClassInput[] | StudySessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutClassInput | StudySessionCreateOrConnectWithoutClassInput[]
    createMany?: StudySessionCreateManyClassInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutClassInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProfessorClassesInput = {
    create?: XOR<UserCreateWithoutProfessorClassesInput, UserUncheckedCreateWithoutProfessorClassesInput> | UserCreateWithoutProfessorClassesInput[] | UserUncheckedCreateWithoutProfessorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorClassesInput | UserCreateOrConnectWithoutProfessorClassesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTutorClassesInput = {
    create?: XOR<UserCreateWithoutTutorClassesInput, UserUncheckedCreateWithoutTutorClassesInput> | UserCreateWithoutTutorClassesInput[] | UserUncheckedCreateWithoutTutorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTutorClassesInput | UserCreateOrConnectWithoutTutorClassesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StudySessionUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudySessionCreateWithoutClassInput, StudySessionUncheckedCreateWithoutClassInput> | StudySessionCreateWithoutClassInput[] | StudySessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutClassInput | StudySessionCreateOrConnectWithoutClassInput[]
    createMany?: StudySessionCreateManyClassInputEnvelope
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutProfessorClassesNestedInput = {
    create?: XOR<UserCreateWithoutProfessorClassesInput, UserUncheckedCreateWithoutProfessorClassesInput> | UserCreateWithoutProfessorClassesInput[] | UserUncheckedCreateWithoutProfessorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorClassesInput | UserCreateOrConnectWithoutProfessorClassesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfessorClassesInput | UserUpsertWithWhereUniqueWithoutProfessorClassesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfessorClassesInput | UserUpdateWithWhereUniqueWithoutProfessorClassesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfessorClassesInput | UserUpdateManyWithWhereWithoutProfessorClassesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTutorClassesNestedInput = {
    create?: XOR<UserCreateWithoutTutorClassesInput, UserUncheckedCreateWithoutTutorClassesInput> | UserCreateWithoutTutorClassesInput[] | UserUncheckedCreateWithoutTutorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTutorClassesInput | UserCreateOrConnectWithoutTutorClassesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTutorClassesInput | UserUpsertWithWhereUniqueWithoutTutorClassesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTutorClassesInput | UserUpdateWithWhereUniqueWithoutTutorClassesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTutorClassesInput | UserUpdateManyWithWhereWithoutTutorClassesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type StudySessionUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudySessionCreateWithoutClassInput, StudySessionUncheckedCreateWithoutClassInput> | StudySessionCreateWithoutClassInput[] | StudySessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutClassInput | StudySessionCreateOrConnectWithoutClassInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutClassInput | StudySessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudySessionCreateManyClassInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutClassInput | StudySessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutClassInput | StudySessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutClassNestedInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutClassInput | FeedbackUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutClassInput | FeedbackUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutClassInput | FeedbackUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutProfessorClassesNestedInput = {
    create?: XOR<UserCreateWithoutProfessorClassesInput, UserUncheckedCreateWithoutProfessorClassesInput> | UserCreateWithoutProfessorClassesInput[] | UserUncheckedCreateWithoutProfessorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfessorClassesInput | UserCreateOrConnectWithoutProfessorClassesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfessorClassesInput | UserUpsertWithWhereUniqueWithoutProfessorClassesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfessorClassesInput | UserUpdateWithWhereUniqueWithoutProfessorClassesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfessorClassesInput | UserUpdateManyWithWhereWithoutProfessorClassesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTutorClassesNestedInput = {
    create?: XOR<UserCreateWithoutTutorClassesInput, UserUncheckedCreateWithoutTutorClassesInput> | UserCreateWithoutTutorClassesInput[] | UserUncheckedCreateWithoutTutorClassesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTutorClassesInput | UserCreateOrConnectWithoutTutorClassesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTutorClassesInput | UserUpsertWithWhereUniqueWithoutTutorClassesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTutorClassesInput | UserUpdateWithWhereUniqueWithoutTutorClassesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTutorClassesInput | UserUpdateManyWithWhereWithoutTutorClassesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type StudySessionUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudySessionCreateWithoutClassInput, StudySessionUncheckedCreateWithoutClassInput> | StudySessionCreateWithoutClassInput[] | StudySessionUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudySessionCreateOrConnectWithoutClassInput | StudySessionCreateOrConnectWithoutClassInput[]
    upsert?: StudySessionUpsertWithWhereUniqueWithoutClassInput | StudySessionUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudySessionCreateManyClassInputEnvelope
    set?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    disconnect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    delete?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    connect?: StudySessionWhereUniqueInput | StudySessionWhereUniqueInput[]
    update?: StudySessionUpdateWithWhereUniqueWithoutClassInput | StudySessionUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudySessionUpdateManyWithWhereWithoutClassInput | StudySessionUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput> | FeedbackCreateWithoutClassInput[] | FeedbackUncheckedCreateWithoutClassInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutClassInput | FeedbackCreateOrConnectWithoutClassInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutClassInput | FeedbackUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: FeedbackCreateManyClassInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutClassInput | FeedbackUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutClassInput | FeedbackUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutSessionsInput = {
    create?: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSessionsInput
    connect?: ClassWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type ClassUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutSessionsInput
    upsert?: ClassUpsertWithoutSessionsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutSessionsInput, ClassUpdateWithoutSessionsInput>, ClassUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutStudentGivesFeedbackInput = {
    create?: XOR<UserCreateWithoutStudentGivesFeedbackInput, UserUncheckedCreateWithoutStudentGivesFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentGivesFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTutorGivesFeedbackInput = {
    create?: XOR<UserCreateWithoutTutorGivesFeedbackInput, UserUncheckedCreateWithoutTutorGivesFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutTutorGivesFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProfessorFeedbackInput = {
    create?: XOR<UserCreateWithoutProfessorFeedbackInput, UserUncheckedCreateWithoutProfessorFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessorFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTutorFeedbackInput = {
    create?: XOR<UserCreateWithoutTutorFeedbackInput, UserUncheckedCreateWithoutTutorFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutTutorFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<ClassCreateWithoutFeedbackInput, ClassUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: ClassCreateOrConnectWithoutFeedbackInput
    connect?: ClassWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutStudentGivesFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutStudentGivesFeedbackInput, UserUncheckedCreateWithoutStudentGivesFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentGivesFeedbackInput
    upsert?: UserUpsertWithoutStudentGivesFeedbackInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentGivesFeedbackInput, UserUpdateWithoutStudentGivesFeedbackInput>, UserUncheckedUpdateWithoutStudentGivesFeedbackInput>
  }

  export type UserUpdateOneWithoutTutorGivesFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutTutorGivesFeedbackInput, UserUncheckedCreateWithoutTutorGivesFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutTutorGivesFeedbackInput
    upsert?: UserUpsertWithoutTutorGivesFeedbackInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTutorGivesFeedbackInput, UserUpdateWithoutTutorGivesFeedbackInput>, UserUncheckedUpdateWithoutTutorGivesFeedbackInput>
  }

  export type UserUpdateOneWithoutProfessorFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutProfessorFeedbackInput, UserUncheckedCreateWithoutProfessorFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessorFeedbackInput
    upsert?: UserUpsertWithoutProfessorFeedbackInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfessorFeedbackInput, UserUpdateWithoutProfessorFeedbackInput>, UserUncheckedUpdateWithoutProfessorFeedbackInput>
  }

  export type UserUpdateOneWithoutTutorFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutTutorFeedbackInput, UserUncheckedCreateWithoutTutorFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutTutorFeedbackInput
    upsert?: UserUpsertWithoutTutorFeedbackInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTutorFeedbackInput, UserUpdateWithoutTutorFeedbackInput>, UserUncheckedUpdateWithoutTutorFeedbackInput>
  }

  export type ClassUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<ClassCreateWithoutFeedbackInput, ClassUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: ClassCreateOrConnectWithoutFeedbackInput
    upsert?: ClassUpsertWithoutFeedbackInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutFeedbackInput, ClassUpdateWithoutFeedbackInput>, ClassUncheckedUpdateWithoutFeedbackInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ClassCreateWithoutProfessorsInput = {
    courseCode: string
    name: string
    tutors?: UserCreateNestedManyWithoutTutorClassesInput
    sessions?: StudySessionCreateNestedManyWithoutClassInput
    Feedback?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutProfessorsInput = {
    classId?: number
    courseCode: string
    name: string
    tutors?: UserUncheckedCreateNestedManyWithoutTutorClassesInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutClassInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutProfessorsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutProfessorsInput, ClassUncheckedCreateWithoutProfessorsInput>
  }

  export type FeedbackCreateWithoutProfessorInput = {
    feedback: string
    createdAt?: Date | string
    fromStudent?: UserCreateNestedOneWithoutStudentGivesFeedbackInput
    fromTutor?: UserCreateNestedOneWithoutTutorGivesFeedbackInput
    tutor?: UserCreateNestedOneWithoutTutorFeedbackInput
    class: ClassCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutProfessorInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutProfessorInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutProfessorInput, FeedbackUncheckedCreateWithoutProfessorInput>
  }

  export type FeedbackCreateManyProfessorInputEnvelope = {
    data: FeedbackCreateManyProfessorInput | FeedbackCreateManyProfessorInput[]
  }

  export type ClassCreateWithoutTutorsInput = {
    courseCode: string
    name: string
    professors?: UserCreateNestedManyWithoutProfessorClassesInput
    sessions?: StudySessionCreateNestedManyWithoutClassInput
    Feedback?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutTutorsInput = {
    classId?: number
    courseCode: string
    name: string
    professors?: UserUncheckedCreateNestedManyWithoutProfessorClassesInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutClassInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutTutorsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTutorsInput, ClassUncheckedCreateWithoutTutorsInput>
  }

  export type StudySessionCreateWithoutTutorInput = {
    location: string
    time: string
    class: ClassCreateNestedOneWithoutSessionsInput
  }

  export type StudySessionUncheckedCreateWithoutTutorInput = {
    sessionId?: number
    classCode: string
    location: string
    time: string
  }

  export type StudySessionCreateOrConnectWithoutTutorInput = {
    where: StudySessionWhereUniqueInput
    create: XOR<StudySessionCreateWithoutTutorInput, StudySessionUncheckedCreateWithoutTutorInput>
  }

  export type StudySessionCreateManyTutorInputEnvelope = {
    data: StudySessionCreateManyTutorInput | StudySessionCreateManyTutorInput[]
  }

  export type FeedbackCreateWithoutTutorInput = {
    feedback: string
    createdAt?: Date | string
    fromStudent?: UserCreateNestedOneWithoutStudentGivesFeedbackInput
    fromTutor?: UserCreateNestedOneWithoutTutorGivesFeedbackInput
    professor?: UserCreateNestedOneWithoutProfessorFeedbackInput
    class: ClassCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutTutorInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    professorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutTutorInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutTutorInput, FeedbackUncheckedCreateWithoutTutorInput>
  }

  export type FeedbackCreateManyTutorInputEnvelope = {
    data: FeedbackCreateManyTutorInput | FeedbackCreateManyTutorInput[]
  }

  export type FeedbackCreateWithoutFromTutorInput = {
    feedback: string
    createdAt?: Date | string
    fromStudent?: UserCreateNestedOneWithoutStudentGivesFeedbackInput
    professor?: UserCreateNestedOneWithoutProfessorFeedbackInput
    tutor?: UserCreateNestedOneWithoutTutorFeedbackInput
    class: ClassCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutFromTutorInput = {
    feedbackId?: number
    fromStudentId?: number | null
    professorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutFromTutorInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutFromTutorInput, FeedbackUncheckedCreateWithoutFromTutorInput>
  }

  export type FeedbackCreateManyFromTutorInputEnvelope = {
    data: FeedbackCreateManyFromTutorInput | FeedbackCreateManyFromTutorInput[]
  }

  export type FeedbackCreateWithoutFromStudentInput = {
    feedback: string
    createdAt?: Date | string
    fromTutor?: UserCreateNestedOneWithoutTutorGivesFeedbackInput
    professor?: UserCreateNestedOneWithoutProfessorFeedbackInput
    tutor?: UserCreateNestedOneWithoutTutorFeedbackInput
    class: ClassCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutFromStudentInput = {
    feedbackId?: number
    fromTutorId?: number | null
    professorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutFromStudentInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutFromStudentInput, FeedbackUncheckedCreateWithoutFromStudentInput>
  }

  export type FeedbackCreateManyFromStudentInputEnvelope = {
    data: FeedbackCreateManyFromStudentInput | FeedbackCreateManyFromStudentInput[]
  }

  export type ClassUpsertWithWhereUniqueWithoutProfessorsInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutProfessorsInput, ClassUncheckedUpdateWithoutProfessorsInput>
    create: XOR<ClassCreateWithoutProfessorsInput, ClassUncheckedCreateWithoutProfessorsInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutProfessorsInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutProfessorsInput, ClassUncheckedUpdateWithoutProfessorsInput>
  }

  export type ClassUpdateManyWithWhereWithoutProfessorsInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutProfessorsInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    classId?: IntFilter<"Class"> | number
    courseCode?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutProfessorInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutProfessorInput, FeedbackUncheckedUpdateWithoutProfessorInput>
    create: XOR<FeedbackCreateWithoutProfessorInput, FeedbackUncheckedCreateWithoutProfessorInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutProfessorInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutProfessorInput, FeedbackUncheckedUpdateWithoutProfessorInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutProfessorInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutProfessorInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    feedbackId?: IntFilter<"Feedback"> | number
    fromStudentId?: IntNullableFilter<"Feedback"> | number | null
    fromTutorId?: IntNullableFilter<"Feedback"> | number | null
    professorId?: IntNullableFilter<"Feedback"> | number | null
    tutorId?: IntNullableFilter<"Feedback"> | number | null
    classCode?: StringFilter<"Feedback"> | string
    feedback?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type ClassUpsertWithWhereUniqueWithoutTutorsInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutTutorsInput, ClassUncheckedUpdateWithoutTutorsInput>
    create: XOR<ClassCreateWithoutTutorsInput, ClassUncheckedCreateWithoutTutorsInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutTutorsInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutTutorsInput, ClassUncheckedUpdateWithoutTutorsInput>
  }

  export type ClassUpdateManyWithWhereWithoutTutorsInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutTutorsInput>
  }

  export type StudySessionUpsertWithWhereUniqueWithoutTutorInput = {
    where: StudySessionWhereUniqueInput
    update: XOR<StudySessionUpdateWithoutTutorInput, StudySessionUncheckedUpdateWithoutTutorInput>
    create: XOR<StudySessionCreateWithoutTutorInput, StudySessionUncheckedCreateWithoutTutorInput>
  }

  export type StudySessionUpdateWithWhereUniqueWithoutTutorInput = {
    where: StudySessionWhereUniqueInput
    data: XOR<StudySessionUpdateWithoutTutorInput, StudySessionUncheckedUpdateWithoutTutorInput>
  }

  export type StudySessionUpdateManyWithWhereWithoutTutorInput = {
    where: StudySessionScalarWhereInput
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyWithoutTutorInput>
  }

  export type StudySessionScalarWhereInput = {
    AND?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
    OR?: StudySessionScalarWhereInput[]
    NOT?: StudySessionScalarWhereInput | StudySessionScalarWhereInput[]
    sessionId?: IntFilter<"StudySession"> | number
    tutorId?: IntFilter<"StudySession"> | number
    classCode?: StringFilter<"StudySession"> | string
    location?: StringFilter<"StudySession"> | string
    time?: StringFilter<"StudySession"> | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutTutorInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutTutorInput, FeedbackUncheckedUpdateWithoutTutorInput>
    create: XOR<FeedbackCreateWithoutTutorInput, FeedbackUncheckedCreateWithoutTutorInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutTutorInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutTutorInput, FeedbackUncheckedUpdateWithoutTutorInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutTutorInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutTutorInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutFromTutorInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutFromTutorInput, FeedbackUncheckedUpdateWithoutFromTutorInput>
    create: XOR<FeedbackCreateWithoutFromTutorInput, FeedbackUncheckedCreateWithoutFromTutorInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutFromTutorInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutFromTutorInput, FeedbackUncheckedUpdateWithoutFromTutorInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutFromTutorInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutFromTutorInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutFromStudentInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutFromStudentInput, FeedbackUncheckedUpdateWithoutFromStudentInput>
    create: XOR<FeedbackCreateWithoutFromStudentInput, FeedbackUncheckedCreateWithoutFromStudentInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutFromStudentInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutFromStudentInput, FeedbackUncheckedUpdateWithoutFromStudentInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutFromStudentInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutFromStudentInput>
  }

  export type UserCreateWithoutProfessorClassesInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorFeedback?: FeedbackCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackCreateNestedManyWithoutFromStudentInput
  }

  export type UserUncheckedCreateWithoutProfessorClassesInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorFeedback?: FeedbackUncheckedCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassUncheckedCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackUncheckedCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromStudentInput
  }

  export type UserCreateOrConnectWithoutProfessorClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessorClassesInput, UserUncheckedCreateWithoutProfessorClassesInput>
  }

  export type UserCreateWithoutTutorClassesInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackCreateNestedManyWithoutProfessorInput
    sessions?: StudySessionCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackCreateNestedManyWithoutFromStudentInput
  }

  export type UserUncheckedCreateWithoutTutorClassesInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassUncheckedCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackUncheckedCreateNestedManyWithoutProfessorInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackUncheckedCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromStudentInput
  }

  export type UserCreateOrConnectWithoutTutorClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTutorClassesInput, UserUncheckedCreateWithoutTutorClassesInput>
  }

  export type StudySessionCreateWithoutClassInput = {
    location: string
    time: string
    tutor: UserCreateNestedOneWithoutSessionsInput
  }

  export type StudySessionUncheckedCreateWithoutClassInput = {
    sessionId?: number
    tutorId: number
    location: string
    time: string
  }

  export type StudySessionCreateOrConnectWithoutClassInput = {
    where: StudySessionWhereUniqueInput
    create: XOR<StudySessionCreateWithoutClassInput, StudySessionUncheckedCreateWithoutClassInput>
  }

  export type StudySessionCreateManyClassInputEnvelope = {
    data: StudySessionCreateManyClassInput | StudySessionCreateManyClassInput[]
  }

  export type FeedbackCreateWithoutClassInput = {
    feedback: string
    createdAt?: Date | string
    fromStudent?: UserCreateNestedOneWithoutStudentGivesFeedbackInput
    fromTutor?: UserCreateNestedOneWithoutTutorGivesFeedbackInput
    professor?: UserCreateNestedOneWithoutProfessorFeedbackInput
    tutor?: UserCreateNestedOneWithoutTutorFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutClassInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    professorId?: number | null
    tutorId?: number | null
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutClassInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput>
  }

  export type FeedbackCreateManyClassInputEnvelope = {
    data: FeedbackCreateManyClassInput | FeedbackCreateManyClassInput[]
  }

  export type UserUpsertWithWhereUniqueWithoutProfessorClassesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProfessorClassesInput, UserUncheckedUpdateWithoutProfessorClassesInput>
    create: XOR<UserCreateWithoutProfessorClassesInput, UserUncheckedCreateWithoutProfessorClassesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProfessorClassesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProfessorClassesInput, UserUncheckedUpdateWithoutProfessorClassesInput>
  }

  export type UserUpdateManyWithWhereWithoutProfessorClassesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProfessorClassesInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    availability?: StringNullableFilter<"User"> | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutTutorClassesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTutorClassesInput, UserUncheckedUpdateWithoutTutorClassesInput>
    create: XOR<UserCreateWithoutTutorClassesInput, UserUncheckedCreateWithoutTutorClassesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTutorClassesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTutorClassesInput, UserUncheckedUpdateWithoutTutorClassesInput>
  }

  export type UserUpdateManyWithWhereWithoutTutorClassesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTutorClassesInput>
  }

  export type StudySessionUpsertWithWhereUniqueWithoutClassInput = {
    where: StudySessionWhereUniqueInput
    update: XOR<StudySessionUpdateWithoutClassInput, StudySessionUncheckedUpdateWithoutClassInput>
    create: XOR<StudySessionCreateWithoutClassInput, StudySessionUncheckedCreateWithoutClassInput>
  }

  export type StudySessionUpdateWithWhereUniqueWithoutClassInput = {
    where: StudySessionWhereUniqueInput
    data: XOR<StudySessionUpdateWithoutClassInput, StudySessionUncheckedUpdateWithoutClassInput>
  }

  export type StudySessionUpdateManyWithWhereWithoutClassInput = {
    where: StudySessionScalarWhereInput
    data: XOR<StudySessionUpdateManyMutationInput, StudySessionUncheckedUpdateManyWithoutClassInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutClassInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutClassInput, FeedbackUncheckedUpdateWithoutClassInput>
    create: XOR<FeedbackCreateWithoutClassInput, FeedbackUncheckedCreateWithoutClassInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutClassInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutClassInput, FeedbackUncheckedUpdateWithoutClassInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutClassInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutClassInput>
  }

  export type UserCreateWithoutSessionsInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassCreateNestedManyWithoutTutorsInput
    tutorFeedback?: FeedbackCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackCreateNestedManyWithoutFromStudentInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassUncheckedCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackUncheckedCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassUncheckedCreateNestedManyWithoutTutorsInput
    tutorFeedback?: FeedbackUncheckedCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromStudentInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type ClassCreateWithoutSessionsInput = {
    courseCode: string
    name: string
    professors?: UserCreateNestedManyWithoutProfessorClassesInput
    tutors?: UserCreateNestedManyWithoutTutorClassesInput
    Feedback?: FeedbackCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutSessionsInput = {
    classId?: number
    courseCode: string
    name: string
    professors?: UserUncheckedCreateNestedManyWithoutProfessorClassesInput
    tutors?: UserUncheckedCreateNestedManyWithoutTutorClassesInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutSessionsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUpdateManyWithoutTutorsNestedInput
    tutorFeedback?: FeedbackUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUncheckedUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUncheckedUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUncheckedUpdateManyWithoutTutorsNestedInput
    tutorFeedback?: FeedbackUncheckedUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput
  }

  export type ClassUpsertWithoutSessionsInput = {
    update: XOR<ClassUpdateWithoutSessionsInput, ClassUncheckedUpdateWithoutSessionsInput>
    create: XOR<ClassCreateWithoutSessionsInput, ClassUncheckedCreateWithoutSessionsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutSessionsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutSessionsInput, ClassUncheckedUpdateWithoutSessionsInput>
  }

  export type ClassUpdateWithoutSessionsInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUpdateManyWithoutProfessorClassesNestedInput
    tutors?: UserUpdateManyWithoutTutorClassesNestedInput
    Feedback?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutSessionsInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUncheckedUpdateManyWithoutProfessorClassesNestedInput
    tutors?: UserUncheckedUpdateManyWithoutTutorClassesNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type UserCreateWithoutStudentGivesFeedbackInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackCreateNestedManyWithoutFromTutorInput
  }

  export type UserUncheckedCreateWithoutStudentGivesFeedbackInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassUncheckedCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackUncheckedCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassUncheckedCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackUncheckedCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromTutorInput
  }

  export type UserCreateOrConnectWithoutStudentGivesFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentGivesFeedbackInput, UserUncheckedCreateWithoutStudentGivesFeedbackInput>
  }

  export type UserCreateWithoutTutorGivesFeedbackInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackCreateNestedManyWithoutTutorInput
    studentGivesFeedback?: FeedbackCreateNestedManyWithoutFromStudentInput
  }

  export type UserUncheckedCreateWithoutTutorGivesFeedbackInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassUncheckedCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackUncheckedCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassUncheckedCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackUncheckedCreateNestedManyWithoutTutorInput
    studentGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromStudentInput
  }

  export type UserCreateOrConnectWithoutTutorGivesFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTutorGivesFeedbackInput, UserUncheckedCreateWithoutTutorGivesFeedbackInput>
  }

  export type UserCreateWithoutProfessorFeedbackInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassCreateNestedManyWithoutProfessorsInput
    tutorClasses?: ClassCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackCreateNestedManyWithoutFromStudentInput
  }

  export type UserUncheckedCreateWithoutProfessorFeedbackInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassUncheckedCreateNestedManyWithoutProfessorsInput
    tutorClasses?: ClassUncheckedCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutTutorInput
    tutorFeedback?: FeedbackUncheckedCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromStudentInput
  }

  export type UserCreateOrConnectWithoutProfessorFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessorFeedbackInput, UserUncheckedCreateWithoutProfessorFeedbackInput>
  }

  export type UserCreateWithoutTutorFeedbackInput = {
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackCreateNestedManyWithoutFromStudentInput
  }

  export type UserUncheckedCreateWithoutTutorFeedbackInput = {
    id?: number
    email: string
    password: string
    name: string
    phoneNumber?: string | null
    role: string
    availability?: string | null
    professorClasses?: ClassUncheckedCreateNestedManyWithoutProfessorsInput
    professorFeedback?: FeedbackUncheckedCreateNestedManyWithoutProfessorInput
    tutorClasses?: ClassUncheckedCreateNestedManyWithoutTutorsInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutTutorInput
    tutorGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromTutorInput
    studentGivesFeedback?: FeedbackUncheckedCreateNestedManyWithoutFromStudentInput
  }

  export type UserCreateOrConnectWithoutTutorFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTutorFeedbackInput, UserUncheckedCreateWithoutTutorFeedbackInput>
  }

  export type ClassCreateWithoutFeedbackInput = {
    courseCode: string
    name: string
    professors?: UserCreateNestedManyWithoutProfessorClassesInput
    tutors?: UserCreateNestedManyWithoutTutorClassesInput
    sessions?: StudySessionCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutFeedbackInput = {
    classId?: number
    courseCode: string
    name: string
    professors?: UserUncheckedCreateNestedManyWithoutProfessorClassesInput
    tutors?: UserUncheckedCreateNestedManyWithoutTutorClassesInput
    sessions?: StudySessionUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutFeedbackInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutFeedbackInput, ClassUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpsertWithoutStudentGivesFeedbackInput = {
    update: XOR<UserUpdateWithoutStudentGivesFeedbackInput, UserUncheckedUpdateWithoutStudentGivesFeedbackInput>
    create: XOR<UserCreateWithoutStudentGivesFeedbackInput, UserUncheckedCreateWithoutStudentGivesFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentGivesFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentGivesFeedbackInput, UserUncheckedUpdateWithoutStudentGivesFeedbackInput>
  }

  export type UserUpdateWithoutStudentGivesFeedbackInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUpdateManyWithoutFromTutorNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentGivesFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUncheckedUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUncheckedUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUncheckedUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUncheckedUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput
  }

  export type UserUpsertWithoutTutorGivesFeedbackInput = {
    update: XOR<UserUpdateWithoutTutorGivesFeedbackInput, UserUncheckedUpdateWithoutTutorGivesFeedbackInput>
    create: XOR<UserCreateWithoutTutorGivesFeedbackInput, UserUncheckedCreateWithoutTutorGivesFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTutorGivesFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTutorGivesFeedbackInput, UserUncheckedUpdateWithoutTutorGivesFeedbackInput>
  }

  export type UserUpdateWithoutTutorGivesFeedbackInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUpdateManyWithoutTutorNestedInput
    studentGivesFeedback?: FeedbackUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutTutorGivesFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUncheckedUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUncheckedUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUncheckedUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUncheckedUpdateManyWithoutTutorNestedInput
    studentGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUpsertWithoutProfessorFeedbackInput = {
    update: XOR<UserUpdateWithoutProfessorFeedbackInput, UserUncheckedUpdateWithoutProfessorFeedbackInput>
    create: XOR<UserCreateWithoutProfessorFeedbackInput, UserUncheckedCreateWithoutProfessorFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfessorFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfessorFeedbackInput, UserUncheckedUpdateWithoutProfessorFeedbackInput>
  }

  export type UserUpdateWithoutProfessorFeedbackInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUpdateManyWithoutProfessorsNestedInput
    tutorClasses?: ClassUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessorFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUncheckedUpdateManyWithoutProfessorsNestedInput
    tutorClasses?: ClassUncheckedUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUncheckedUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUpsertWithoutTutorFeedbackInput = {
    update: XOR<UserUpdateWithoutTutorFeedbackInput, UserUncheckedUpdateWithoutTutorFeedbackInput>
    create: XOR<UserCreateWithoutTutorFeedbackInput, UserUncheckedCreateWithoutTutorFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTutorFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTutorFeedbackInput, UserUncheckedUpdateWithoutTutorFeedbackInput>
  }

  export type UserUpdateWithoutTutorFeedbackInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutTutorFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUncheckedUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUncheckedUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUncheckedUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput
  }

  export type ClassUpsertWithoutFeedbackInput = {
    update: XOR<ClassUpdateWithoutFeedbackInput, ClassUncheckedUpdateWithoutFeedbackInput>
    create: XOR<ClassCreateWithoutFeedbackInput, ClassUncheckedCreateWithoutFeedbackInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutFeedbackInput, ClassUncheckedUpdateWithoutFeedbackInput>
  }

  export type ClassUpdateWithoutFeedbackInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUpdateManyWithoutProfessorClassesNestedInput
    tutors?: UserUpdateManyWithoutTutorClassesNestedInput
    sessions?: StudySessionUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutFeedbackInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUncheckedUpdateManyWithoutProfessorClassesNestedInput
    tutors?: UserUncheckedUpdateManyWithoutTutorClassesNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutClassNestedInput
  }

  export type FeedbackCreateManyProfessorInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type StudySessionCreateManyTutorInput = {
    sessionId?: number
    classCode: string
    location: string
    time: string
  }

  export type FeedbackCreateManyTutorInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    professorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackCreateManyFromTutorInput = {
    feedbackId?: number
    fromStudentId?: number | null
    professorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type FeedbackCreateManyFromStudentInput = {
    feedbackId?: number
    fromTutorId?: number | null
    professorId?: number | null
    tutorId?: number | null
    classCode: string
    feedback: string
    createdAt?: Date | string
  }

  export type ClassUpdateWithoutProfessorsInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tutors?: UserUpdateManyWithoutTutorClassesNestedInput
    sessions?: StudySessionUpdateManyWithoutClassNestedInput
    Feedback?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutProfessorsInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tutors?: UserUncheckedUpdateManyWithoutTutorClassesNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutClassNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutProfessorsInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutProfessorInput = {
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStudent?: UserUpdateOneWithoutStudentGivesFeedbackNestedInput
    fromTutor?: UserUpdateOneWithoutTutorGivesFeedbackNestedInput
    tutor?: UserUpdateOneWithoutTutorFeedbackNestedInput
    class?: ClassUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutProfessorInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutProfessorInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUpdateWithoutTutorsInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUpdateManyWithoutProfessorClassesNestedInput
    sessions?: StudySessionUpdateManyWithoutClassNestedInput
    Feedback?: FeedbackUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutTutorsInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    professors?: UserUncheckedUpdateManyWithoutProfessorClassesNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutClassNestedInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutTutorsInput = {
    classId?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StudySessionUpdateWithoutTutorInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type StudySessionUncheckedUpdateWithoutTutorInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    classCode?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type StudySessionUncheckedUpdateManyWithoutTutorInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    classCode?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutTutorInput = {
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStudent?: UserUpdateOneWithoutStudentGivesFeedbackNestedInput
    fromTutor?: UserUpdateOneWithoutTutorGivesFeedbackNestedInput
    professor?: UserUpdateOneWithoutProfessorFeedbackNestedInput
    class?: ClassUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutTutorInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutTutorInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutFromTutorInput = {
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStudent?: UserUpdateOneWithoutStudentGivesFeedbackNestedInput
    professor?: UserUpdateOneWithoutProfessorFeedbackNestedInput
    tutor?: UserUpdateOneWithoutTutorFeedbackNestedInput
    class?: ClassUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutFromTutorInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutFromTutorInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutFromStudentInput = {
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromTutor?: UserUpdateOneWithoutTutorGivesFeedbackNestedInput
    professor?: UserUpdateOneWithoutProfessorFeedbackNestedInput
    tutor?: UserUpdateOneWithoutTutorFeedbackNestedInput
    class?: ClassUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutFromStudentInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutFromStudentInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    classCode?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudySessionCreateManyClassInput = {
    sessionId?: number
    tutorId: number
    location: string
    time: string
  }

  export type FeedbackCreateManyClassInput = {
    feedbackId?: number
    fromStudentId?: number | null
    fromTutorId?: number | null
    professorId?: number | null
    tutorId?: number | null
    feedback: string
    createdAt?: Date | string
  }

  export type UserUpdateWithoutProfessorClassesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorFeedback?: FeedbackUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessorClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorFeedback?: FeedbackUncheckedUpdateManyWithoutProfessorNestedInput
    tutorClasses?: ClassUncheckedUpdateManyWithoutTutorsNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUncheckedUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateManyWithoutProfessorClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutTutorClassesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUpdateManyWithoutProfessorNestedInput
    sessions?: StudySessionUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutTutorClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    professorClasses?: ClassUncheckedUpdateManyWithoutProfessorsNestedInput
    professorFeedback?: FeedbackUncheckedUpdateManyWithoutProfessorNestedInput
    sessions?: StudySessionUncheckedUpdateManyWithoutTutorNestedInput
    tutorFeedback?: FeedbackUncheckedUpdateManyWithoutTutorNestedInput
    tutorGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromTutorNestedInput
    studentGivesFeedback?: FeedbackUncheckedUpdateManyWithoutFromStudentNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTutorClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudySessionUpdateWithoutClassInput = {
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    tutor?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type StudySessionUncheckedUpdateWithoutClassInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    tutorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type StudySessionUncheckedUpdateManyWithoutClassInput = {
    sessionId?: IntFieldUpdateOperationsInput | number
    tutorId?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutClassInput = {
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromStudent?: UserUpdateOneWithoutStudentGivesFeedbackNestedInput
    fromTutor?: UserUpdateOneWithoutTutorGivesFeedbackNestedInput
    professor?: UserUpdateOneWithoutProfessorFeedbackNestedInput
    tutor?: UserUpdateOneWithoutTutorFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutClassInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutClassInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    fromStudentId?: NullableIntFieldUpdateOperationsInput | number | null
    fromTutorId?: NullableIntFieldUpdateOperationsInput | number | null
    professorId?: NullableIntFieldUpdateOperationsInput | number | null
    tutorId?: NullableIntFieldUpdateOperationsInput | number | null
    feedback?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassCountOutputTypeDefaultArgs instead
     */
    export type ClassCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassDefaultArgs instead
     */
    export type ClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudySessionDefaultArgs instead
     */
    export type StudySessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudySessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}